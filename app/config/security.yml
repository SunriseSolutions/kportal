# To get started with security, check out the documentation:
# http://symfony.com/doc/current/security.html
security:
    role_hierarchy:
        ROLE_SONATA_ADMIN: ~
        ROLE_TEACHER: ROLE_SONATA_ADMIN
        ROLE_ADMIN:       [ROLE_TEACHER]
        ROLE_ALLOWED_TO_SWITCH: ~
        ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]

    # set access_strategy to unanimous, else you may have unexpected behaviors
    access_decision_manager:
        strategy: unanimous

    encoders:
        FOS\UserBundle\Model\UserInterface: bcrypt

    # http://symfony.com/doc/current/security.html#b-configuring-how-users-are-loaded
    providers:
        fos_userbundle:
#            id: fos_user.user_manager
            id: fos_user.user_provider.username_email

    firewalls:
        # disables authentication for assets and the profiler, adapt it according to your needs
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        # -> custom firewall for the admin area of the URL
        admin:
            pattern:            /system(.*)
            context:            backend
            form_login:
                provider:       fos_userbundle
                login_path:     /system/login
                use_forward:    false
                check_path:     /system/login_check
                failure_path:   null
                default_target_path: /system/dashboard
            logout:
                path:           /system/logout
            anonymous:          true
        # -> end custom admin configuration
        main:
            anonymous:          true
            # activate different ways to authenticate

            # http_basic: ~
            # http://symfony.com/doc/current/security.html#a-configuring-how-your-users-will-authenticate

            # form_login: ~
            # http://symfony.com/doc/current/cookbook/security/form_login_setup.html
            form_login:
                provider:       fos_userbundle
                login_path:     /login
                use_forward:    false
                check_path:     /login_check
                failure_path:   null
                use_referer: true
#                failure_handler: app.security.user_login.failure_handler # just in case I am going mad
            logout:             true


            oauth:
                failure_path: /login
                login_path: /login
                check_path: /connect_check
                provider: fos_userbundle
                resource_owners:
                    facebook: "/login/check-facebook"
                    google: "/login/check-google"
                oauth_user_provider:
                    service: user.provider.oauth # here and hwi_oauth.connect.account_connector
#                use_forward:       false
#                oauth_user_provider:
#                    service: app.provider.oauth


    access_control:
        # URL of FOSUserBundle which need to be available to anonymous users
        - { path: ^/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/register, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/resetting, role: IS_AUTHENTICATED_ANONYMOUSLY }

        # Admin and Employer login page needs to be access without credential
        - { path: ^(/(vi|fr|en))?/system/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^(/(vi|fr|en))?/system/logout$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^(/(vi|fr|en))?/system/login_check$, role: IS_AUTHENTICATED_ANONYMOUSLY }

        # Secured part of the site
        # This config requires being logged for the whole site and having the admin/employer role for the admin/employer part.
        # Change these rules to adapt them to your needs
        - { path: ^(/(vi|fr|en))?/system/, role: [ ROLE_SONATA_ADMIN ] }
#        - { path: ^/.*, role: IS_AUTHENTICATED_ANONYMOUSLY,requires_channel: https  }