# Doctrine Configuration
doctrine_phpcr:
    # configure the PHPCR session
    session:
        backend:   '%phpcr_backend%'
        workspace: '%phpcr_workspace%'
        username:  '%phpcr_user%'
        password:  '%phpcr_pass%'
    # enable the ODM layer
    odm:
        auto_mapping: true
        mappings:
#            ApplicationCmfBlockBundle:
#                prefix: Application\Cmf\BlockBundle\Doctrine\Phpcr
            SonataMediaBundle:
                prefix: Sonata\MediaBundle\PHPCR
#            SonataClassificationBundle:
#                prefix: Sonata\ClassificationBundle\PHPCR
#            SonataUserBundle:
#                prefix: Sonata\UserBundle\PHPCR

#            ApplicationSonataMediaBundle:
#                prefix: Application\Sonata\MediaBundle\PHPCR
#            ApplicationSonataClassificationBundle:
#                prefix: Application\Sonata\ClassificationBundle\PHPCR
#            ApplicationSonataUserBundle:
#                prefix: Application\Sonata\UserBundle\PHPCR


        auto_generate_proxy_classes: '%kernel.debug%'
        locales:
            en: [vi]
            vi: [en]

            
doctrine:
    dbal:
        driver:   pdo_mysql
        host:     "%database_host%"
        port:     "%database_port%"
        dbname:   "%database_name%"
        user:     "%database_user%"
        password: "%database_password%"
        charset:  UTF8
        # if using pdo_sqlite as your database driver:
        #   1. add the path in parameters.yml
        #     e.g. database_path: "%kernel.root_dir%/data/data.db3"
        #   2. Uncomment database_path in parameters.yml.dist
        #   3. Uncomment next line:
        #     path:     "%database_path%"
        types:
            json: Sonata\Doctrine\Types\JsonType
            attribute_array:  AppBundle\Doctrine\DBAL\Types\AttributeArray

            
    orm:
        auto_generate_proxy_classes: "%kernel.debug%"
        entity_managers:
            default:
                naming_strategy: doctrine.orm.naming_strategy.underscore
                auto_mapping: true
                mappings:
                    BeanLocationBundle: ~
                    SonataMediaBundle: ~
#                    SonataClassificationBundle: ~
                    SonataUserBundle: ~
#                    SonataNotificationBundle: ~
#
#                    ApplicationBeanLocationBundle: ~
#                    ApplicationSonataMediaBundle: ~
#                    ApplicationSonataClassificationBundle: ~
#                    ApplicationSonataUserBundle: ~
#                    ApplicationSonataNotificationBundle: ~

#                     Use KnpLabs Behaviour instead
#                    gedmo_translatable:
#                        type: annotation
#                        prefix: Gedmo\Translatable\Entity
#                        dir: "%kernel.root_dir%/../vendor/gedmo/doctrine-extensions/lib/Gedmo/Translatable/Entity"
#                        alias: GedmoTranslatable # (optional) it will default to the name set for the mapping
#                        is_bundle: false
#                    gedmo_translator:
#                        type: annotation
#                        prefix: Gedmo\Translator\Entity
#                        dir: "%kernel.root_dir%/../vendor/gedmo/doctrine-extensions/lib/Gedmo/Translator/Entity"
#                        alias: GedmoTranslator # (optional) it will default to the name set for the mapping
#                        is_bundle: false

                entity_listeners:
                    entities:
                        -
                            class:  "AppBundle\\Entity\\H5P\\Content"
                            listener:
                                -
                                    class: "AppBundle\\Doctrine\\ORM\\Listener\\H5P\\ContentListener"
                                    event:
                                        -
                                            type: postPersist
                                            method: postPersistHandler
                                        -
                                            type: postUpdate
                                            method: postUpdateHandler
                                        -
                                            type: prePersist
                                            method: prePersistHandler
                                        -
                                            type: preUpdate
                                            method: preUpdateHandler
                                        -
                                            type: preRemove
                                            method: preRemoveHandler
                                        -
                                            type: postRemove
                                            method: postRemoveHandler

                        -
                            class:  "AppBundle\\Entity\\Content\\ContentNode"
                            listener:
                                -
                                    class: "AppBundle\\Doctrine\\ORM\\Listener\\Content\\ContentNodeListener"
                                    event:
                                        -
                                            type: postPersist
                                            method: postPersistHandler
                                        -
                                            type: postUpdate
                                            method: postUpdateHandler
                                        -
                                            type: prePersist
                                            method: prePersistHandler
                                        -
                                            type: preUpdate
                                            method: preUpdateHandler
                                        -
                                            type: preRemove
                                            method: preRemoveHandler
                                        -
                                            type: postRemove
                                            method: postRemoveHandler


                        -
                            class:  "AppBundle\\Entity\\Content\\ContentPiece\\ContentPiece"
                            listener:
                                -
                                    class: "AppBundle\\Doctrine\\ORM\\Listener\\Content\\ContentPiece\\ContentPieceListener"
                                    event:
                                        -
                                            type: postPersist
                                            method: postPersistHandler
                                        -
                                            type: postUpdate
                                            method: postUpdateHandler
                                        -
                                            type: prePersist
                                            method: prePersistHandler
                                        -
                                            type: preUpdate
                                            method: preUpdateHandler
                                        -
                                            type: preRemove
                                            method: preRemoveHandler
                                        -
                                            type: postRemove
                                            method: postRemoveHandler


# services to handle doctrine extensions
# import it in config.yml
#services:
    # KernelRequest listener
#    extension.listener:
#        class: AppBundle\Listener\DoctrineExtensionListener
#        calls:
#            - [ setContainer, [ '@service_container' ] ]
#        tags:
            ## translatable sets locale after router processing
#            - { name: kernel.event_listener, event: kernel.request, method: onLateKernelRequest, priority: -10 }
##             loggable hooks user username if one is in security context
#            - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest }


    # Doctrine Extension listeners to handle behaviors
#    gedmo.listener.translatable:
#        class: Gedmo\Translatable\TranslatableListener
#        tags:
#            - { name: doctrine.event_subscriber, connection: default }
#        calls:
#            - [ setAnnotationReader, [ '@annotation_reader' ] ]
#            - [ setDefaultLocale, [ %locale% ] ]
#            - [ setTranslationFallback, [ false ] ]

#NOTE: Don't forget to make proper changes to DoctrineExtensionListener if you happen to use the geedmo.loggable            
knp_doctrine_behaviors:
#    blameable:      false
#    geocodable:     ~     # Here null is converted to false
#    loggable:       ~
#    sluggable:      true
#    soft_deletable: true
#    sortable:             false
#    timestampable:        false
    translatable:         true
#    tree:                 false
    # All others behaviors are disabled

#stof_doctrine_extensions:
#    default_locale: %locale%
#    orm:
#        default:
#            translatable: true
                        
doctrine_cache:
    providers:
        phpcr_meta:
            type: file_system
        phpcr_nodes:
            type: file_system
